/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
https://github.com/joethei/obsidian-key-promoter/
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    showUnassigned: true,
    showAssigned: true,
    threshold: 0,
    notificationTimeout: 5,
    template: "{{commandId}} - {{commandName}} - {{hotkey}}",
};
class KeyPromoterSettingsTab extends obsidian.PluginSettingTab {
    constructor(plugin) {
        super(plugin.app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Key Promoter Settings' });
        new obsidian.Setting(containerEl)
            .setName('Show for assigned commands')
            .setDesc('show a notification for commands that do have a hotkey assigned')
            .addToggle(toggle => {
            toggle
                .setValue(this.plugin.settings.showAssigned)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.showAssigned = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName('Show for unassigned commands')
            .setDesc('show a notification for commands that do not have a hotkey assigned')
            .addToggle(toggle => {
            toggle
                .setValue(this.plugin.settings.showUnassigned)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.showUnassigned = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName('Threshold')
            .setDesc('Only show notification if there are less than X possible commands (use 0 to disable)')
            .addText(text => {
            text
                .setValue(String(this.plugin.settings.threshold))
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                if (isNaN(Number(value)) || value === undefined) {
                    new obsidian.Notice("please specify a valid number");
                    return;
                }
                this.plugin.settings.threshold = Number(value);
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName('Notification timeout')
            .setDesc('show notifications for x seconds')
            .addText(text => {
            text
                .setValue(String(this.plugin.settings.notificationTimeout))
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                if (isNaN(Number(value)) || value === undefined) {
                    new obsidian.Notice("please specify a valid number");
                    return;
                }
                this.plugin.settings.notificationTimeout = Number(value);
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Export template")
            .setDesc('Available variables are: {{commandId}}, {{commandName}}, {{hotkey}}')
            .addTextArea((textArea) => {
            textArea
                .setValue(this.plugin.settings.template)
                .setPlaceholder(DEFAULT_SETTINGS.template)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.template = value;
                yield this.plugin.saveSettings();
            }));
            textArea.inputEl.setAttr("rows", 8);
        });
    }
}

class KeyPromoterPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading plugin key promoter');
            yield this.loadSettings();
            this.addSettingTab(new KeyPromoterSettingsTab(this));
            this.addCommand({
                id: 'key-promoter',
                name: 'Export Hotkeys',
                callback: () => __awaiter(this, void 0, void 0, function* () {
                    if (this.app.vault.getAbstractFileByPath("hotkeys-export.md")) {
                        new obsidian.Notice("there is already a exported file");
                        return;
                    }
                    //@ts-ignore
                    const commands = Object.values(this.app.commands.commands);
                    let content = "";
                    commands.forEach((command) => {
                        let hotkeys = "";
                        if (!command.hotkeys && !this.settings.showUnassigned) {
                            return;
                        }
                        if (command.hotkeys && !this.settings.showAssigned) {
                            return;
                        }
                        if (command.hotkeys) {
                            command.hotkeys.forEach((hotkey) => {
                                if (hotkey.modifiers) {
                                    const modifiers = hotkey.modifiers.join("+").replace('Mod', obsidian.Platform.isMacOS ? 'Cmd' : 'Ctrl');
                                    hotkeys = hotkeys.concat(modifiers + " + " + hotkey.key);
                                }
                                else {
                                    hotkeys = hotkeys.concat(hotkey.key);
                                }
                            });
                        }
                        if (hotkeys.length == 0) {
                            if (!this.settings.showUnassigned) {
                                return;
                            }
                            hotkeys = "No hotkey defined";
                        }
                        const singleCommand = this.settings.template
                            .replace('{{commandId}}', command.id)
                            .replace('{{commandName}}', command.name)
                            .replace('{{hotkey}}', hotkeys);
                        content = content.concat(singleCommand);
                    });
                    const file = yield this.app.vault.create(obsidian.normalizePath("hotkeys-export.md"), content);
                    yield this.app.workspace.activeLeaf.openFile(file, {
                        state: { mode: 'edit' },
                    });
                    new obsidian.Notice("exported hotkeys");
                })
            });
            this.registerDomEvent(document, 'click', (event) => {
                if (event.target == undefined)
                    return;
                //don't handle anything if there is nothing to show.
                if (!this.settings.showAssigned && !this.settings.showUnassigned)
                    return;
                console.log(event);
                //@ts-ignore
                let label = event.target.ariaLabel;
                //@ts-ignore
                if (!label)
                    label = event.target.innerText;
                if (!label)
                    return;
                //@ts-ignore
                const offsetParent = event.target.offsetParent;
                //don't show notifications when in settings, file explorer, etc.
                if (offsetParent) {
                    if (offsetParent.classList.contains("mod-settings"))
                        return;
                    if (offsetParent.classList.contains("nav-files-container"))
                        return;
                    if (offsetParent.classList.contains("markdown-preview-view"))
                        return;
                    if (offsetParent.classList.contains("markdown-source-view"))
                        return;
                    if (offsetParent.classList.contains("cm-editor"))
                        return;
                    if (offsetParent.classList.contains("CodeMirror-line"))
                        return;
                    if (offsetParent.classList.contains("modal"))
                        return;
                }
                //@ts-ignore
                const path = event.target.path;
                //don't show if text nested in rss-feed
                if (path) {
                    path.forEach((pathContent) => {
                        //@ts-ignore
                        const classList = pathContent.classList;
                        if (classList.contains("rss-feeds-folders"))
                            return;
                    });
                }
                //@ts-ignore
                let commands = Object.values(this.app.commands.commands);
                commands = commands.filter((command) => {
                    /*
                    due to different capitalisation and different text content check for contains, not equals
                    i.e. the button named 'close' executes the command 'close active pane'
                     */
                    return command.name.toLowerCase().contains(label.toLowerCase());
                });
                if (this.settings.threshold != 0 && commands.length > this.settings.threshold) {
                    new obsidian.Notice("there are to many hotkeys that could fit the action named \"" + label + "\"");
                    return;
                }
                commands.forEach((command) => {
                    if (command.hotkeys == undefined) {
                        if (this.settings.showUnassigned) {
                            new obsidian.Notice("Hotkey for \"" + command.name + "\" is not set", this.settings.notificationTimeout * 1000);
                        }
                        return;
                    }
                    if (this.settings.showAssigned) {
                        command.hotkeys.forEach((hotkey) => {
                            const modifiers = hotkey.modifiers.join("+").replace('Mod', obsidian.Platform.isMacOS ? 'Cmd' : 'Ctrl');
                            new obsidian.Notice("Hotkey for \"" + command.name + "\" is \"" + modifiers + " + " + hotkey.key + "\"", this.settings.notificationTimeout * 1000);
                        });
                    }
                });
            });
        });
    }
    onunload() {
        console.log('unloading plugin key promoter');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = KeyPromoterPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
